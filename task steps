task steps-

📖 📦 Part 1: Prerequisites Setup

1.🔹 Step 1️⃣: Create Azure DevOps Organization and Project
create new Project name: finance-container-deploy
Visibility: Private

2.Step 2️⃣: Create Azure Container Registry (ACR)
Subscription: your subscription
Resource Group: aci-dev-resources (create new if needed)
Registry Name: financeregistry (unique name)

3. Step 3️⃣: Create Azure Active Directory Service Principal
In Azure Portal → search for Azure Active Directory
Click App registrations,New registration
Name: devops-service-principal
Click Register
Go to Certificates & secrets
Click + New client secret
Add description: devops secret, expiry 6 months

4. Step 4️⃣: Assign Role to Service Principal
choose Subscription
Go to Access control (IAM) on left
Click + Add → Add role assignment
Role: Contributor
Assign access to: User, group, or service principal
Select your service principal name (devops-service-principal)
or
az role assignment create --<app id> --role Contributor --scope /subscriptions/<subscription id>

📖 ⚙️ Part 2: DevOps CI/CD Setup
Step 5️⃣: Create Service Connection in Azure DevOps
Go to Azure DevOps → Project Settings (bottom left corner)
Click Service connections
Click + New service connection,Azure Resource Manager
Select Service principal (manual)

Fill in:
Subscription ID: From Azure Portal → Subscriptions → Overview
Subscription name
Service principal ID: Application (client) ID
Service principal key: the client secret value
Tenant ID: Directory (tenant) ID

Add Federated Identity Credential (FIC) for Workload Identity Federation
o to Azure Portal → Azure Active Directory → App registrations
Click on your dev-service-principal
configure name,issuer,subject  identifier
add

Recreate the Azure DevOps Service Connection for docker orit can pose  problem in ci pipeline 

Step 6️⃣: Push Your Code to Azure DevOps Repo
go to repos, push your codeand create a dockerfile

Step 7️⃣: Create CI Pipeline
Add Tasks:

Task 1: Maven
Display name: Build Java App
POM file: pom.xml
Goals: package

Task 2: Docker
Display name: Build and Push Docker Image
Container Registry Type: Azure Container Registry
Azure subscription: select your service connection
Azure Container Registry: financeregistry
Command: Build and push an image
Dockerfile: path to Dockerfile
Image name: springbootapp:$(Build.BuildId)

📖 🚀 Part 4: Continuous Deployment (Release Pipeline)

 Step 8️⃣: Create Release Pipeline
Go to Azure DevOps → Releases
Click + New Pipeline
Start with an Empty job
Click Add an artifact

Source type: Build
Source: your CI pipeline
Default version: Latest
Click Add
Create a Stage
Name: Deploy to ACI
Click Tasks
Add Task: Azure CLI
Display name: Deploy ACI
Azure subscription: your service connection
Script type: Inline

Inline Script:
az container create --resource-group aci-dev-resources \
--name springbootaci \
--image financeregistry.azurecr.io/springbootapp:$(Build.BuildId) \
--registry-login-server financeregistry.azurecr.io \
--registry-username <acr-username> \
--registry-password <acr-password> \
--dns-name-label springbootaci-demo --ports 8080

 Step 9️⃣: Enable Continuous Deployment Trigger
On Artifact → click lightning bolt icon ⚡
Enable Continuous deployment trigger

📖 🧪 Part 5: Post-Deployment Testing
curl http://springbootaci-demo.eastus.azurecontainer.io:8080/actuator/health
HTTP-200  OK

📊 Part 6: Monitor ACI Instance
Azure Portal → Container Instances → select your instance

Go to:
Metrics
Logs
Properties



